#######################################################################################################################
#######################################################################################################################
# Title:        Python Electric Vehicle Power Toolkit (PyEVPowerKit)
# Topic:        EV Modeling
# File:         plotRelia
# Date:         18.03.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.1
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
A short description of the function goes here.
Inputs:     1)
            2)
            N)
Outputs:    1)
            2)
            M)
"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np

#######################################################################################################################
# Additional Functions
#######################################################################################################################


#######################################################################################################################
# Main Function
#######################################################################################################################
def plotRelia(dataLife, setup):
    ###################################################################################################################
    # MSG IN
    ###################################################################################################################
    print("INFO: Plotting Reliability")

    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    axis = setup['Exp']['plotAxis']
    cat = ['GBX', 'EMA', 'INV', 'HVS']
    colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']

    ###################################################################################################################
    # Pre-Processing
    ###################################################################################################################
    # ==============================================================================
    # Statistical Values
    # ==============================================================================
    # ------------------------------------------
    # Lifetime
    # ------------------------------------------
    L_Arr = [dataLife['GBX'][axis]['Arr']['L'], dataLife['EMA'][axis]['Arr']['L'], dataLife['INV'][axis]['Arr']['L'], dataLife['HVS']['Arr']['L']]
    L_Cof = [dataLife['GBX'][axis]['Cof']['L'], dataLife['EMA'][axis]['Cof']['L'], dataLife['INV'][axis]['Cof']['L'], dataLife['HVS']['Cof']['L']]

    # ------------------------------------------
    # Damage
    # ------------------------------------------
    D_Arr = [dataLife['GBX'][axis]['Arr']['D'], dataLife['EMA'][axis]['Arr']['D'], dataLife['INV'][axis]['Arr']['D'], dataLife['HVS']['Arr']['D']]
    D_Cof = [dataLife['GBX'][axis]['Cof']['D'], dataLife['EMA'][axis]['Cof']['D'], dataLife['INV'][axis]['Cof']['D'], dataLife['HVS']['Cof']['D']]

    # ------------------------------------------
    # Failure
    # ------------------------------------------
    F_Arr = [dataLife['GBX'][axis]['Arr']['F'], dataLife['EMA'][axis]['Arr']['F'], dataLife['INV'][axis]['Arr']['F'], dataLife['HVS']['Arr']['F']]
    F_Cof = [dataLife['GBX'][axis]['Cof']['F'], dataLife['EMA'][axis]['Cof']['F'], dataLife['INV'][axis]['Cof']['F'], dataLife['HVS']['Cof']['F']]

    # ==============================================================================
    # Figure
    # ==============================================================================
    fig = make_subplots(rows=5, cols=2, shared_xaxes=False, vertical_spacing=0.05)

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # Arrhenius
    # ==============================================================================
    # ------------------------------------------
    # PDF
    # ------------------------------------------
    fig.add_trace(go.Scatter(x=dataLife['GBX'][axis]['Arr']['x'], y=dataLife['GBX'][axis]['Arr']['pdf'], mode='lines', name='GBX Pdf'), row=1, col=1)
    fig.add_trace(go.Scatter(x=dataLife['EMA'][axis]['Arr']['x'], y=dataLife['EMA'][axis]['Arr']['pdf'], mode='lines', name='EMA Pdf'), row=1, col=1)
    fig.add_trace(go.Scatter(x=dataLife['INV'][axis]['Arr']['x'], y=dataLife['INV'][axis]['Arr']['pdf'], mode='lines', name='INV Pdf'), row=1, col=1)
    fig.add_trace(go.Scatter(x=dataLife['HVS']['Arr']['x'], y=dataLife['HVS']['Arr']['pdf'], mode='lines', name='HVS Pdf'), row=1, col=1)

    # ------------------------------------------
    # CDF
    # ------------------------------------------
    fig.add_trace(go.Scatter(x=dataLife['GBX'][axis]['Arr']['x'], y=dataLife['GBX'][axis]['Arr']['cdf'], mode='lines', name='GBX Cdf'), row=2, col=1)
    fig.add_trace(go.Scatter(x=dataLife['EMA'][axis]['Arr']['x'], y=dataLife['EMA'][axis]['Arr']['cdf'], mode='lines', name='EMA Cdf'), row=2, col=1)
    fig.add_trace(go.Scatter(x=dataLife['INV'][axis]['Arr']['x'], y=dataLife['INV'][axis]['Arr']['cdf'], mode='lines', name='INV Cdf'), row=2, col=1)
    fig.add_trace(go.Scatter(x=dataLife['HVS']['Arr']['x'], y=dataLife['HVS']['Arr']['cdf'], mode='lines', name='HVS Cdf'), row=2, col=1)

    # ------------------------------------------
    # Life
    # ------------------------------------------
    fig.add_trace(go.Bar(
        x=cat,
        y=L_Arr,
        name='L_Arr',
    ), row=3, col=1)

    # ------------------------------------------
    # Damage
    # ------------------------------------------
    fig.add_trace(go.Bar(
        x=cat,
        y=D_Arr,
        name='D_Arr',
    ), row=4, col=1)

    # ------------------------------------------
    # Failure
    # ------------------------------------------
    fig.add_trace(go.Bar(
        x=cat,
        y=F_Arr,
        name='F_Arr',
    ), row=5, col=1)

    # ==============================================================================
    # Coffin
    # ==============================================================================
    # ------------------------------------------
    # PDF
    # ------------------------------------------
    fig.add_trace(go.Scatter(x=dataLife['GBX'][axis]['Cof']['x'], y=dataLife['GBX'][axis]['Cof']['pdf'], mode='lines', name='GBX Pdf'), row=1, col=2)
    fig.add_trace(go.Scatter(x=dataLife['EMA'][axis]['Cof']['x'], y=dataLife['EMA'][axis]['Cof']['pdf'], mode='lines', name='EMA Pdf'), row=1, col=2)
    fig.add_trace(go.Scatter(x=dataLife['INV'][axis]['Cof']['x'], y=dataLife['INV'][axis]['Cof']['pdf'], mode='lines', name='INV Pdf'), row=1, col=2)
    fig.add_trace(go.Scatter(x=dataLife['HVS']['Cof']['x'], y=dataLife['HVS']['Cof']['pdf'], mode='lines', name='HVS Pdf'), row=1, col=2)

    # ------------------------------------------
    # CDF
    # ------------------------------------------
    fig.add_trace(go.Scatter(x=dataLife['GBX'][axis]['Cof']['x'], y=dataLife['GBX'][axis]['Cof']['cdf'], mode='lines', name='GBX Cdf'), row=2, col=2)
    fig.add_trace(go.Scatter(x=dataLife['EMA'][axis]['Cof']['x'], y=dataLife['EMA'][axis]['Cof']['cdf'], mode='lines', name='EMA Cdf'), row=2, col=2)
    fig.add_trace(go.Scatter(x=dataLife['INV'][axis]['Cof']['x'], y=dataLife['INV'][axis]['Cof']['cdf'], mode='lines', name='INV Cdf'), row=2, col=2)
    fig.add_trace(go.Scatter(x=dataLife['HVS']['Cof']['x'], y=dataLife['HVS']['Cof']['cdf'], mode='lines', name='HVS Cdf'), row=2, col=2)

    # ------------------------------------------
    # Life
    # ------------------------------------------
    fig.add_trace(go.Bar(
        x=cat,
        y=L_Cof,
        name='L_Cof',
    ), row=3, col=2)

    # ------------------------------------------
    # Damage
    # ------------------------------------------
    fig.add_trace(go.Bar(
        x=cat,
        y=D_Cof,
        name='D_Cof',
    ), row=4, col=2)

    # ------------------------------------------
    # Failure
    # ------------------------------------------
    fig.add_trace(go.Bar(
        x=cat,
        y=F_Cof,
        name='F_Cof',
    ), row=5, col=2)

    ###################################################################################################################
    # Post-Processing
    ###################################################################################################################
    # ==============================================================================
    # Axis
    # ==============================================================================
    # ------------------------------------------
    # Set y-axis titles
    # ------------------------------------------
    # Front
    fig.update_yaxes(title_text="Pdf (-)", row=1, col=1)
    fig.update_yaxes(title_text="Cdf (-)", row=2, col=1)
    fig.update_yaxes(title_text="L (hrs)", row=3, col=1)
    fig.update_yaxes(title_text="D (p.u.)", row=4, col=1)
    fig.update_yaxes(title_text="F (%)", row=5, col=1)

    # Rear
    fig.update_yaxes(title_text="Pdf (-)", row=1, col=2)
    fig.update_yaxes(title_text="Cdf (-)", row=2, col=2)
    fig.update_yaxes(title_text="L (cyc)", row=3, col=2)
    fig.update_yaxes(title_text="D (p.u.)", row=4, col=2)
    fig.update_yaxes(title_text="F (%)", row=5, col=2)

    # ------------------------------------------
    # Set x-axis title for the last subplot
    # ------------------------------------------
    fig.update_xaxes(title_text="time (hrs)", row=2, col=1)
    fig.update_xaxes(title_text="cyc (-)", row=2, col=2)

    # ==============================================================================
    # Title
    # ==============================================================================
    txt = "Comparing Component Reliability"
    fig.update_layout(height=setup['Exp']['hFig'], width=setup['Exp']['wFig'], title_text=txt)

    # ==============================================================================
    # Plot
    # ==============================================================================
    fig.show()

    ###################################################################################################################
    # Return
    ###################################################################################################################
    return []

#######################################################################################################################
# References
#######################################################################################################################
