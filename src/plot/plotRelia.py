#######################################################################################################################
#######################################################################################################################
# Title:        Python Electric Vehicle Power Toolkit (PyEVPowerKit)
# Topic:        EV Modeling
# File:         plotRelia
# Date:         18.03.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.1
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
A short description of the function goes here.
Inputs:     1)
            2)
            N)
Outputs:    1)
            2)
            M)
"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import matplotlib.pyplot as plt

#######################################################################################################################
# Additional Functions
#######################################################################################################################


#######################################################################################################################
# Main Function
#######################################################################################################################
def plotRelia(dataLife, setup):
    ###################################################################################################################
    # MSG IN
    ###################################################################################################################
    print("INFO: Plotting Reliability")

    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    axis = setup['Exp']['plotAxis']
    cat = ['GBX', 'EMA', 'INV', 'HVS']

    ###################################################################################################################
    # Pre-Processing
    ###################################################################################################################
    # ==============================================================================
    # Statistical Values
    # ==============================================================================
    # ------------------------------------------
    # Lifetime
    # ------------------------------------------
    L_Arr = [dataLife['GBX'][axis]['Arr']['L'], dataLife['EMA'][axis]['Arr']['L'], dataLife['INV'][axis]['Arr']['L'], dataLife['HVS']['Arr']['L']]
    L_Cof = [dataLife['GBX'][axis]['Cof']['L'], dataLife['EMA'][axis]['Cof']['L'], dataLife['INV'][axis]['Cof']['L'], dataLife['HVS']['Cof']['L']]

    # ------------------------------------------
    # Damage
    # ------------------------------------------
    D_Arr = [dataLife['GBX'][axis]['Arr']['D'], dataLife['EMA'][axis]['Arr']['D'], dataLife['INV'][axis]['Arr']['D'], dataLife['HVS']['Arr']['D']]
    D_Cof = [dataLife['GBX'][axis]['Cof']['D'], dataLife['EMA'][axis]['Cof']['D'], dataLife['INV'][axis]['Cof']['D'], dataLife['HVS']['Cof']['D']]

    # ------------------------------------------
    # Failure
    # ------------------------------------------
    F_Arr = [dataLife['GBX'][axis]['Arr']['F']*100, dataLife['EMA'][axis]['Arr']['F']*100, dataLife['INV'][axis]['Arr']['F']*100, dataLife['HVS']['Arr']['F']*100]
    F_Cof = [dataLife['GBX'][axis]['Cof']['F']*100, dataLife['EMA'][axis]['Cof']['F']*100, dataLife['INV'][axis]['Cof']['F']*100, dataLife['HVS']['Cof']['F']*100]

    ###################################################################################################################
    # Figure Creation
    ###################################################################################################################
    fig, axs = plt.subplots(5, 2)

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # Arrhenius
    # ==============================================================================
    # ------------------------------------------
    # PDF
    # ------------------------------------------
    for comp in cat:
        if comp != 'HVS':
            axs[0, 0].plot(dataLife[comp][axis]['Arr']['x'], dataLife[comp][axis]['Arr']['pdf'], label=f'{comp} Pdf')
        else:
            axs[0, 0].plot(dataLife[comp]['Arr']['x'], dataLife[comp]['Arr']['pdf'], label=f'{comp} Pdf')
    axs[0, 0].legend()
    axs[0, 0].grid(True)

    # ------------------------------------------
    # CDF
    # ------------------------------------------
    for comp in cat:
        if comp != 'HVS':
            axs[1, 0].plot(dataLife[comp][axis]['Arr']['x'], dataLife[comp][axis]['Arr']['cdf'], label=f'{comp} Cdf')
        else:
            axs[1, 0].plot(dataLife[comp]['Arr']['x'], dataLife[comp]['Arr']['cdf'], label=f'{comp} Cdf')
    axs[1, 0].legend()
    axs[1, 0].grid(True)

    # ------------------------------------------
    # Life
    # ------------------------------------------
    axs[2, 0].bar(cat, L_Arr)
    axs[2, 0].set_ylabel('Life (hrs)')
    axs[2, 0].grid(True)

    # ------------------------------------------
    # Damage
    # ------------------------------------------
    axs[3, 0].bar(cat, D_Arr)
    axs[3, 0].set_ylabel('Damage (p.u.)')
    axs[3, 0].grid(True)

    # ------------------------------------------
    # Failure
    # ------------------------------------------
    axs[4, 0].bar(cat, F_Arr)
    axs[4, 0].set_ylabel('Failure (%)')
    axs[4, 0].grid(True)

    # ==============================================================================
    # Coffin
    # ==============================================================================
    # ------------------------------------------
    # PDF
    # ------------------------------------------
    for comp in cat:
        if comp != 'HVS':
            axs[0, 1].plot(dataLife[comp][axis]['Cof']['x'], dataLife[comp][axis]['Cof']['pdf'], label=f'{comp} Pdf')
        else:
            axs[0, 1].plot(dataLife[comp]['Cof']['x'], dataLife[comp]['Cof']['pdf'], label=f'{comp} Pdf')
    axs[0, 1].legend()
    axs[0, 1].grid(True)

    # ------------------------------------------
    # CDF
    # ------------------------------------------
    for comp in cat:
        if comp != 'HVS':
            axs[1, 1].plot(dataLife[comp][axis]['Cof']['x'], dataLife[comp][axis]['Cof']['cdf'], label=f'{comp} Cdf')
        else:
            axs[1, 1].plot(dataLife[comp]['Cof']['x'], dataLife[comp]['Cof']['cdf'], label=f'{comp} Cdf')
    axs[1, 1].legend()
    axs[1, 1].grid(True)

    # ------------------------------------------
    # Life
    # ------------------------------------------
    axs[2, 1].bar(cat, L_Cof)
    axs[2, 1].set_ylabel('Life (cyc)')
    axs[2, 1].grid(True)

    # ------------------------------------------
    # Damage
    # ------------------------------------------
    axs[3, 1].bar(cat, D_Cof)
    axs[3, 1].set_ylabel('Damage (p.u.)')
    axs[3, 1].grid(True)

    # ------------------------------------------
    # Failure
    # ------------------------------------------
    axs[4, 1].bar(cat, F_Cof)
    axs[4, 1].set_ylabel('Failure (%)')
    axs[4, 1].grid(True)

    ###################################################################################################################
    # Post-Processing
    ###################################################################################################################
    # Set x-axis titles
    for i in range(2):
        axs[4, i].set_xlabel('Category')
    axs[1, 0].set_xlabel('Time (sec)')
    axs[1, 1].set_xlabel('Time (sec)')

    # Set overall title
    plt.suptitle('Comparing Component Reliability', size=18)

    ###################################################################################################################
    # Return
    ###################################################################################################################
    return []
