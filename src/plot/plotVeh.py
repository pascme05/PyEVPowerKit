#######################################################################################################################
#######################################################################################################################
# Title:        Python Electric Vehicle Power Toolkit (PyEVPowerKit)
# Topic:        EV Modeling
# File:         plotVeh
# Date:         18.03.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.1
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
A short description of the function goes here.
Inputs:     1)
            2)
            N)
Outputs:    1)
            2)
            M)
"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import plotly.graph_objects as go
from plotly.subplots import make_subplots

#######################################################################################################################
# Additional Functions
#######################################################################################################################


#######################################################################################################################
# Main Function
#######################################################################################################################
def plotVeh(data, dataTime, setup):
    ###################################################################################################################
    # MSG IN
    ###################################################################################################################
    print("INFO: Plotting vehicle data")

    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # Parameters
    # ==============================================================================
    eff = setup['Par']['VEH']['eta'] * 100

    # ==============================================================================
    # Variables
    # ==============================================================================
    time = data['t']

    ###################################################################################################################
    # Loading Data
    ###################################################################################################################
    
    ###################################################################################################################
    # Pre-Processing
    ###################################################################################################################
    fig = make_subplots(rows=4, cols=1, shared_xaxes=True, vertical_spacing=0.05)

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # Init
    # ==============================================================================
    txt1 = "Vehicle Energy (" + str(eff) + "% Rec Efficiency)"
    txt2 = "Vehicle Consumption (" + str(eff) + "% Rec Efficiency)"

    # ==============================================================================
    # Plotting
    # ==============================================================================
    fig.add_trace(go.Scatter(x=time, y=dataTime['VEH']['F']['t'] / 1000, mode='lines', name='Vehicle Forces'), row=1, col=1)
    fig.add_trace(go.Scatter(x=time, y=dataTime['VEH']['P']['t'] / 1000, mode='lines', name='Vehicle Power'), row=2, col=1)
    fig.add_trace(go.Scatter(x=time, y=dataTime['VEH']['E']['t'] / 3.6e6, mode='lines', name='Vehicle Energy (100% Rec Efficiency)', line=dict(color='#00CC96', dash='dash')), row=3, col=1)
    fig.add_trace(go.Scatter(x=time, y=dataTime['VEH']['E']['rec_on'] / 3.6e6, mode='lines', name=txt1, line=dict(color='#00CC96', dash='solid')), row=3, col=1)
    fig.add_trace(go.Scatter(x=time, y=dataTime['VEH']['E']['rec_off'] / 3.6e6, mode='lines', name='Vehicle Energy (0% Rec Efficiency)', line=dict(color='#00CC96', dash='dot')), row=3, col=1)
    fig.add_trace(go.Scatter(x=time, y=dataTime['VEH']['eta']['t'], mode='lines', name='Vehicle Consumption (100% Rec Efficiency)', line=dict(color='#AB63FA', dash='dash')), row=4, col=1)
    fig.add_trace(go.Scatter(x=time, y=dataTime['VEH']['eta']['rec_on'], mode='lines', name=txt2, line=dict(color='#AB63FA', dash='solid')), row=4, col=1)
    fig.add_trace(go.Scatter(x=time, y=dataTime['VEH']['eta']['rec_off'], mode='lines', name='Vehicle Consumption (0% Rec Efficiency)', line=dict(color='#AB63FA', dash='dot')), row=4, col=1)

    ###################################################################################################################
    # Post-Processing
    ###################################################################################################################
    # ==============================================================================
    # Axis
    # ==============================================================================
    # ------------------------------------------
    # Set y-axis titles
    # ------------------------------------------
    fig.update_yaxes(title_text="F (kN)", row=1, col=1)
    fig.update_yaxes(title_text="P (kW)", row=2, col=1)
    fig.update_yaxes(title_text="E (kWh)", row=3, col=1)
    fig.update_yaxes(title_text="Eta (kWh/100 km)", row=4, col=1)

    # ------------------------------------------
    # Set x-axis title for the last subplot
    # ------------------------------------------
    fig.update_xaxes(title_text="time (sec)", row=5, col=1)

    # ==============================================================================
    # Title
    # ==============================================================================
    txt = "Vehicle Forces, Power, Energies, and Efficiencies: "
    fig.update_layout(height=setup['Exp']['hFig'], width=setup['Exp']['wFig'], title_text=txt)

    # ==============================================================================
    # Plot
    # ==============================================================================
    fig.show()

    ###################################################################################################################
    # Return
    ###################################################################################################################
    return []

#######################################################################################################################
# References
#######################################################################################################################
