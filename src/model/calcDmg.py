#######################################################################################################################
#######################################################################################################################
# Title:        Python Electric Vehicle Power Toolkit (PyEVPowerKit)
# Topic:        EV Modeling
# File:         calcDmg
# Date:         18.03.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.1
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
These functions calculate the reliability considering thermal aging (Arrhenius), thermo-mechanical tension (Coffin
Manson), and voltage-thermal aging (Prokopovic Vaskas).
Inputs:     1) COM:     Input instance, e.g. gearbox
            2) dt:      Discrete step width (sec)
            3) T:       Temperature input (degC)
            4) V:       Voltage input (V)
            5) setup:   Setup variables
Outputs:    1) L:       Lifetime of the component (hrs)
            2) D:       Damage of the component (p.u.)
            3) F:       Failure probability (%)
            4) PDF:     Probability density function of the component
            5) CDF:     Cumulative density function of the component
            6) x:       Range of the pdf and cdf function
"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import numpy as np
import rainflow
from scipy.stats import weibull_min

#######################################################################################################################
# Additional Functions
#######################################################################################################################


#######################################################################################################################
# Arrhenius
#######################################################################################################################
def calcDmgArr(COM, dt, T, setup):
    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # General
    # ==============================================================================
    kB = 8.617e-5
    N_cyc = setup['Exp']['cyc']
    Tend = dt * len(T) * N_cyc / 3600

    # ==============================================================================
    # Lifetime
    # ==============================================================================
    Ea = COM.Ea
    T0 = COM.T0
    L0 = COM.L0
    F0 = COM.F0

    # ==============================================================================
    # Statistics
    # ==============================================================================
    beta = COM.beta
    CL = COM.CL
    Bx = COM.Bx
    quantile = 1 - (1 - CL) / 2
    quantile95 = 1 - (1 - 0.95) / 2

    ###################################################################################################################
    # Pre-Processing
    ###################################################################################################################
    L63 = L0 / np.power(-np.log(1 - F0), 1 / beta)
    cor95 = weibull_min.ppf(quantile95, beta, scale=L63) / weibull_min.ppf(quantile, beta, scale=L63)
    L63 = L63 / cor95

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    L = L0 * np.exp((Ea / kB) * (1 / (T + 273.15) - 1 / (T0 + 273.15)))
    D = np.sum(dt / L) * N_cyc / 3600
    L = 1 / D * L63

    ###################################################################################################################
    # Post-Processing
    ###################################################################################################################
    # ==============================================================================
    # Correct Mean Value and Confidence
    # ==============================================================================
    Lx = weibull_min.ppf(Bx, beta, scale=L)

    # ==============================================================================
    # Calculate Failure Probability
    # ==============================================================================
    F = weibull_min.cdf(Tend, beta, scale=L)

    # ==============================================================================
    # Calculate PDF and CDF
    # ==============================================================================
    x_min = weibull_min.ppf(1.7e-6, beta, scale=L63)
    x_max = weibull_min.ppf(1-1.7e-6, beta, scale=L63)
    x = np.linspace(x_min, x_max, 1000)
    pdf = weibull_min.pdf(x, beta, scale=L63)
    cdf = weibull_min.cdf(x, beta, scale=L63)

    ###################################################################################################################
    # Return
    ###################################################################################################################
    return [Lx, D, F, pdf, cdf, x]


#######################################################################################################################
# Prokopovic Vaskas
#######################################################################################################################
def calcDmgPro(COM, dt, T, V, setup):
    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # General
    # ==============================================================================
    kB = 8.617e-5
    N_cyc = setup['Exp']['cyc']
    Tend = dt * len(T) * N_cyc / 3600

    # ==============================================================================
    # Lifetime
    # ==============================================================================
    Ea = COM.Ea
    n = COM.n
    T0 = COM.T0
    V0 = COM.V0
    L0 = COM.L0
    F0 = COM.F0

    # ==============================================================================
    # Statistics
    # ==============================================================================
    beta = COM.beta
    CL = COM.CL
    Bx = COM.Bx
    quantile = 1 - (1 - CL) / 2
    quantile95 = 1 - (1 - 0.95) / 2

    ###################################################################################################################
    # Pre-Processing
    ###################################################################################################################
    L63 = L0 / np.power(-np.log(1 - F0), 1 / beta)
    cor95 = weibull_min.ppf(quantile95, beta, scale=L63) / weibull_min.ppf(quantile, beta, scale=L63)
    L63 = L63 / cor95

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    L = L0 * (V/V0) ** n * np.exp((Ea / kB) * (1 / (T + 273.15) - 1 / (T0 + 273.15)))
    D = np.sum(dt / L) * N_cyc / 3600
    L = 1 / D * L63

    ###################################################################################################################
    # Post-Processing
    ###################################################################################################################
    # ==============================================================================
    # Correct Mean Value and Confidence
    # ==============================================================================
    Lx = weibull_min.ppf(Bx, beta, scale=L)

    # ==============================================================================
    # Calculate Failure Probability
    # ==============================================================================
    F = weibull_min.cdf(Tend, beta, scale=L)

    # ==============================================================================
    # Calculate PDF and CDF
    # ==============================================================================
    x_min = weibull_min.ppf(1.7e-6, beta, scale=L63)
    x_max = weibull_min.ppf(1-1.7e-6, beta, scale=L63)
    x = np.linspace(x_min, x_max, 1000)
    pdf = weibull_min.pdf(x, beta, scale=L63)
    cdf = weibull_min.cdf(x, beta, scale=L63)

    ###################################################################################################################
    # Return
    ###################################################################################################################
    return [Lx, D, F, pdf, cdf, x]


#######################################################################################################################
# Coffin Manson
#######################################################################################################################
def calcDmgCof(COM, dt, T, setup):
    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # General
    # ==============================================================================
    N_cyc = setup['Exp']['cyc']

    # ==============================================================================
    # Lifetime
    # ==============================================================================
    k = COM.k
    dT0 = COM.dT0
    Nf0 = COM.Nf0
    F0 = COM.F0

    # ==============================================================================
    # Statistics
    # ==============================================================================
    beta = COM.beta
    CL = COM.CL
    Bx = COM.Bx
    quantile = 1 - (1 - CL) / 2
    quantile95 = 1 - (1 - 0.95) / 2

    ###################################################################################################################
    # Pre-Processing
    ###################################################################################################################
    # ==============================================================================
    # Getting Characteristic values
    # ==============================================================================
    L63 = Nf0 / np.power(-np.log(1 - F0), 1 / beta)
    cor95 = weibull_min.ppf(quantile95, beta, scale=L63) / weibull_min.ppf(quantile, beta, scale=L63)
    L63 = L63 / cor95

    # ==============================================================================
    # Rainflow counting
    # ==============================================================================
    rf = np.array(rainflow.count_cycles(T))
    N_tot = rf.shape[0] * N_cyc

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    L = Nf0 * (rf[:, 0] / dT0) ** k
    D = np.sum(rf[:, 1] / L) * N_cyc
    L = 1 / D * L63

    ###################################################################################################################
    # Post-Processing
    ###################################################################################################################
    # ==============================================================================
    # Correct Mean Value and Confidence
    # ==============================================================================
    Lx = weibull_min.ppf(Bx, beta, scale=L)

    # ==============================================================================
    # Calculate Failure Probability
    # ==============================================================================
    F = weibull_min.cdf(N_tot, beta, scale=L)

    # ==============================================================================
    # Calculate PDF and CDF
    # ==============================================================================
    x_min = weibull_min.ppf(1.7e-6, beta, scale=L63)
    x_max = weibull_min.ppf(1-1.7e-6, beta, scale=L63)
    x = np.linspace(x_min, x_max, 1000)
    pdf = weibull_min.pdf(x, beta, scale=L63)
    cdf = weibull_min.cdf(x, beta, scale=L63)

    ###################################################################################################################
    # Return
    ###################################################################################################################
    return [Lx, D, F, pdf, cdf, x]

#######################################################################################################################
# References
#######################################################################################################################
