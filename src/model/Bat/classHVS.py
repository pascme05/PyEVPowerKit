#######################################################################################################################
#######################################################################################################################
# Title:        Python Electric Vehicle Power Toolkit (PyEVPowerKit)
# Topic:        EV Modeling
# File:         classBat
# Date:         18.03.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.1
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
A short description of the class goes here.
Inputs:     1)
            2)
            N)
Outputs:    1)
            2)
            M)
"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import numpy as np


#######################################################################################################################
# Class
#######################################################################################################################
class classBat:
    ###################################################################################################################
    # Constructor
    ###################################################################################################################
    def __init__(self, R_i, V_nom, V_max, V_min, E_bat, C_th, R_th, E_a):
        self.R_i = R_i
        self.V_nom = V_nom
        self.V_max = V_max
        self.V_min = V_min
        self.E_bat = E_bat
        self.C_th = C_th
        self.R_th = R_th
        self.E_a = E_a
        self.k = 8.617e-5

    ###################################################################################################################
    # Electrical
    ###################################################################################################################
    def calc_elec(self, Vdc, Idc, dt, SOC, T):
        # ==============================================================================
        # Pre-processing
        # ==============================================================================
        Ri = self.R_i * np.exp(self.E_a/(self.k * (T + 273.15)))

        # ==============================================================================
        # Calculation
        # ==============================================================================
        # ------------------------------------------
        # Output Energy Bat
        # ------------------------------------------
        Pout = Vdc * Idc

        # ------------------------------------------
        # Losses
        # ------------------------------------------
        Pv = Ri * Idc ** 2

        # ------------------------------------------
        # Change Energy
        # ------------------------------------------
        Pin = Pout + Pv
        eta = Pout / Pin
        dQ = Pin * dt

        # ------------------------------------------
        # Update SOC und Vdc
        # ------------------------------------------
        SOC = SOC + dQ / self.E_bat
        Vdc = (self.V_max - (self.V_max - self.V_min) * (1 - SOC / 100))

        # ==============================================================================
        # Return
        # ==============================================================================
        return [dQ, SOC, Vdc, Pin, Pout, Pv, eta]

    ###################################################################################################################
    # Losses
    ###################################################################################################################
    def calc_loss(self, Idc, T):
        # ==============================================================================
        # Pre-processing
        # ==============================================================================
        Ri = self.R_i * np.exp(self.E_a / (self.k * (T + 273.15)))

        # ==============================================================================
        # Calculation
        # ==============================================================================
        Pv = Ri * Idc ** 2

        # ==============================================================================
        # Return
        # ==============================================================================
        return Pv

    ###################################################################################################################
    # Thermal
    ###################################################################################################################
    def calc_therm(self, dt, Tc, Pv1, Pv2):
        # ==============================================================================
        # Initialisation
        # ==============================================================================
        tau = self.R_th * self.C_th
        Rth = self.R_th

        # ==============================================================================
        # Calculation
        # ==============================================================================
        dT = (2 * tau - dt) / (2 * tau + dt) * Tc + (Rth * dt) / (2 * tau + dt) * (Pv1 + Pv2)

        # ==============================================================================
        # Return
        # ==============================================================================
        return dT

#######################################################################################################################
# References
#######################################################################################################################
