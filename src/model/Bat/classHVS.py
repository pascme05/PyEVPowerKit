#######################################################################################################################
#######################################################################################################################
# Title:        Python Electric Vehicle Power Toolkit (PyEVPowerKit)
# Topic:        EV Modeling
# File:         classBat
# Date:         18.03.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.1
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
Class of the battery pack including loss calculation, electrical calculation, and thermal calculation.

Fnc:
1)  calc_elec:  calculates the electrical values and updates the SOC
2)  calc_loss:  calculates the losses based on the internal cell resistance
3)  calc_ther:  calculates the self-heating based on the thermal parameters and the losses

"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import numpy as np


#######################################################################################################################
# Class
#######################################################################################################################
class classBat:
    ###################################################################################################################
    # Constructor
    ###################################################################################################################
    def __init__(self, P_max, T_max, I_max, R_i, V_nom, V_max, V_min, E_a_temp, E_bat, C_th, R_th, h_th, A_th, Ea, k, n, L0,
                 Nf0, F0, beta, CL, Bx):
        self.P_max = P_max
        self.T_max = T_max
        self.I_max = I_max
        self.R_i = R_i
        self.V_nom = V_nom
        self.V_max = V_max
        self.V_min = V_min
        self.E_a_temp = E_a_temp
        self.E_bat = E_bat
        self.C_th = C_th
        self.R_th = R_th
        self.h_th = h_th
        self.A_th = A_th
        self.Ea = Ea
        self.k = k
        self.n = n
        self.L0 = L0
        self.Nf0 = Nf0
        self.F0 = F0
        self.beta = beta
        self.CL = CL
        self.Bx = Bx
        self.kB = 8.617e-5

    ###################################################################################################################
    # Electrical
    ###################################################################################################################
    def calc_elec(self, Vdc, Idc, dt, SOC, T, setup):
        # ==============================================================================
        # Description
        # ==============================================================================
        """
        This function calculates the electrical parameters of the battery.

        Input:
        1) Vdc:     DC battery voltage (V)
        2) Idc:     DC battery current (A)
        3) dt:      discrete time step between two samples (sec)
        4) SOC:     state-of-charge of the battery (%)
        5) T:       temperature of the battery (degC)
        6) setup:   setup file of the simulation

        Output:
        1) dQ:      Change of charge (Ws)
        2) SOC:     Updated state-of-charge of the battery (%)
        3) Vdc:     Update DC battery voltage (V)
        4) Pin:     Input power (W)
        5) Pout:    Output power (W)
        6) Pv:      Losses (W)
        7) eta:     Efficiency (%)
        """

        # ==============================================================================
        # Fnc
        # ==============================================================================
        def sat(x, theta):
            return min(theta, max(-theta, x))

        # ==============================================================================
        # Pre-Processing
        # ==============================================================================
        if setup['Exp']['lim'] == 1:
            Idc = sat(Idc, self.I_max)
            P_lim = sat(Vdc * Idc, self.P_max)
            if Vdc != 0:
                Idc = P_lim / (Vdc + 1e-9)

        # ==============================================================================
        # Calculation
        # ==============================================================================
        # ------------------------------------------
        # Output Energy Bat
        # ------------------------------------------
        Pout = Vdc * Idc

        # ------------------------------------------
        # Losses
        # ------------------------------------------
        Pv = self.calc_loss(Idc, T)

        # ------------------------------------------
        # Change Energy
        # ------------------------------------------
        Pin = Pout + Pv
        dQ = Pin * dt

        # ------------------------------------------
        # Efficiency
        # ------------------------------------------
        # Init
        eta = Pout / Pin
        eta = np.nan_to_num(eta, nan=1)

        # Recuperation
        if eta >= 1:
            eta = 1 / eta

        # ------------------------------------------
        # Update SOC und Vdc
        # ------------------------------------------
        SOC = SOC - dQ / (self.E_bat*3.6e6)
        Vdc = (self.V_max - (self.V_max - self.V_min) * (1 - SOC))

        # ==============================================================================
        # Return
        # ==============================================================================
        return [dQ, SOC, Vdc, Pin, Pout, Pv, eta]

    ###################################################################################################################
    # Losses
    ###################################################################################################################
    def calc_loss(self, Idc, T):
        # ==============================================================================
        # Description
        # ==============================================================================
        """
        This function calculates the losses of the battery.

        Input:
        1) Idc:     DC battery current (A)
        2) T:       temperature of the battery (degC)

        Output:
        1) Pv:      Losses (W)
        """

        # ==============================================================================
        # Pre-processing
        # ==============================================================================
        Ri = self.R_i * np.exp(-self.E_a_temp / self.kB * (1 / 293.15 - 1/(T + 273.15)))

        # ==============================================================================
        # Calculation
        # ==============================================================================
        Pv = Ri * Idc ** 2

        # ==============================================================================
        # Return
        # ==============================================================================
        return Pv

    ###################################################################################################################
    # Thermal
    ###################################################################################################################
    def calc_therm(self, dt, T, Pv1, Pv2):
        # ==============================================================================
        # Description
        # ==============================================================================
        """
        This function calculates the self-heating of the battery.

        Input:
        1) dt:      discrete time step between two samples (sec)
        2) T:       Temperature of the previous time step (degC)
        3) Pv1:     Losses of the previous time step (W)
        4) Pv2:     Losses of the actual time step (W)

        Output:
        1) dT:      Temperature change (K)
        """

        # ==============================================================================
        # Initialisation
        # ==============================================================================
        tau = self.R_th * self.C_th
        Rth = self.R_th

        # ==============================================================================
        # Calculation
        # ==============================================================================
        dT = (2 * tau - dt) / (2 * tau + dt) * T + (Rth * dt) / (2 * tau + dt) * (Pv1 + Pv2)

        # ==============================================================================
        # Return
        # ==============================================================================
        return dT

#######################################################################################################################
# References
#######################################################################################################################
