#######################################################################################################################
#######################################################################################################################
# Title:        Python Electric Vehicle Power Toolkit (PyEVPowerKit)
# Topic:        EV Modeling
# File:         classINV
# Date:         18.03.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.1
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
A short description of the class goes here.
Inputs:     1)
            2)
            N)
Outputs:    1)
            2)
            M)
"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import numpy as np


#######################################################################################################################
# Class
#######################################################################################################################
class classB6:
    ###################################################################################################################
    # Constructor
    ###################################################################################################################
    def __init__(self, fs, Sw, nSw, V_0, I_0, T_0, Tj_max, V_ce0, r_T, V_d0, r_D, E_on, E_off, E_rec, alpha, R_esr, R_g, C_dc, R_ac, R_dc, C_th, R_th):
        self.fs = fs
        self.Sw = Sw
        self.nSw = nSw
        self.V_0 = V_0
        self.I_0 = I_0
        self.T_0 = T_0
        self.Tj_max = Tj_max
        self.V_ce0 = V_ce0
        self.r_T = r_T
        self.V_d0 = V_d0
        self.r_D = r_D
        self.E_on = E_on
        self.E_off = E_off
        self.E_rec = E_rec
        self.alpha = alpha
        self.R_esr = R_esr
        self.R_g = R_g
        self.C_dc = C_dc
        self.R_ac = R_ac
        self.R_dc = R_dc
        self.C_th = C_th
        self.R_th = R_th

    ###################################################################################################################
    # Electrical
    ###################################################################################################################
    def calc_elec(self, cos_phi, Vs, Is, Vdc, Tj):
        # ==============================================================================
        # Pre-Processing
        # ==============================================================================
        v_six_step = 2 * Vdc / np.pi
        M_i = Vs / v_six_step

        # ==============================================================================
        # Calculation
        # ==============================================================================
        # ------------------------------------------
        # Currents
        # ------------------------------------------
        I_dc = 3 / np.pi * Is * M_i * cos_phi
        I_c = np.sqrt((2 * np.sqrt(3) / np.pi ** 2 * M_i + (
                    8 * np.sqrt(3) / np.pi ** 2 - 18 / np.pi ** 2 * M_i) * M_i * cos_phi ** 2) / 2) * Is

        # ------------------------------------------
        # Losses
        # ------------------------------------------
        [Pv, _, _, _, _] = self.calc_loss(M_i, cos_phi, Is, I_c, I_dc, Vdc, Tj)

        # ==============================================================================
        # Post-Processing
        # ==============================================================================
        Pin = Vdc * I_dc + Pv
        Pout = 3 / 2 * Is * Vs * cos_phi
        eta = Pout / Pin

        # ==============================================================================
        # Return
        # ==============================================================================
        return [I_dc, I_c, Pin, Pout, Pv, eta]

    ###################################################################################################################
    # Losses
    ###################################################################################################################
    def calc_loss(self, Mi, cos_phi, Is, Ic, Idc, Vdc, Tj):
        # ==============================================================================
        # Pre-Processing
        # ==============================================================================
        # ------------------------------------------
        # Scale Energies
        # ------------------------------------------
        E_on = self.E_on * np.max(np.abs(Is)) / self.I_0 * np.max(np.abs(Vdc)) / self.V_0 * (1 + self.alpha/100) ** (Tj - self.T_0)
        E_off = self.E_off * np.max(np.abs(Is)) / self.I_0 * np.max(np.abs(Vdc)) / self.V_0 * (1 + self.alpha / 100) ** (Tj - self.T_0)
        E_rec = self.E_rec * np.max(np.abs(Is)) / self.I_0 * np.max(np.abs(Vdc)) / self.V_0 * (1 + self.alpha / 100) ** (Tj - self.T_0)

        # ------------------------------------------
        # Scale Temperature
        # ------------------------------------------
        Rac = self.R_ac * (1 + 0.00393 * (Tj - 20))
        Rdc = self.R_dc * (1 + 0.00393 * (Tj - 20))
        r_T = self.r_T * (1 + self.alpha/100) ** (Tj - self.T_0)
        r_D = self.r_D * (1 + self.alpha / 100) ** (Tj - self.T_0)

        # ------------------------------------------
        # Scale Current
        # ------------------------------------------
        I0 = np.sqrt(2) * Is / self.nSw

        # ==============================================================================
        # Calculation
        # ==============================================================================
        # ------------------------------------------
        # Power Module
        # ------------------------------------------
        # MOSFET
        if self.Sw == 2:
            p_l_sw_con = r_T * I0 ** 2 * (1 / 8 + (Mi * cos_phi) / (3 * np.pi))
            p_l_di_con = self.V_d0 * I0 * (1 / (2 * np.pi) - (Mi * cos_phi) / 8) + r_D * I0 ** 2 * (1 / 8 - (Mi * cos_phi) / (3 * np.pi))
            p_l_sw_swi = (E_on + E_off + E_rec) * self.fs
            p_l_swi = self.nSw * (p_l_sw_con + p_l_di_con + p_l_sw_swi)

        # IGBT
        else:
            p_l_sw_con = self.V_ce0 * I0 * (1 / (2*np.pi) + (Mi * cos_phi) / 8) + r_T * I0**2 * (1/8 + (Mi * cos_phi) / (3*np.pi))
            p_l_di_con = self.V_d0 * I0 * (1 / (2*np.pi) - (Mi * cos_phi) / 8) + r_D * I0**2 * (1/8 - (Mi * cos_phi) / (3*np.pi))
            p_l_sw_swi = (E_on + E_off + E_rec) * self.fs
            p_l_swi = self.nSw * (p_l_sw_con + p_l_di_con + p_l_sw_swi)

        # ------------------------------------------
        # DC-Link Capacitor
        # ------------------------------------------
        p_l_cap = self.R_esr * Ic ** 2

        # ------------------------------------------
        # Busbars
        # ------------------------------------------
        p_l_ac = 3 * Rac * Is ** 2
        p_l_dc = 2 * Rdc * Idc ** 2

        # ==============================================================================
        # Post-Processing
        # ==============================================================================
        Pv = p_l_swi + p_l_cap + p_l_ac + p_l_dc

        # ==============================================================================
        # Return
        # ==============================================================================
        return [Pv, p_l_swi, p_l_cap, p_l_ac, p_l_dc]

    ###################################################################################################################
    # Thermal
    ###################################################################################################################
    def calc_therm(self, dt, Tc, Pv1, Pv2):
        # ==============================================================================
        # Initialisation
        # ==============================================================================
        tau = self.R_th * self.C_th
        Rth = self.R_th

        # ==============================================================================
        # Calculation
        # ==============================================================================
        dT = (2 * tau - dt) / (2 * tau + dt) * Tc + (Rth * dt) / (2 * tau + dt) * (Pv1 + Pv2)

        # ==============================================================================
        # Return
        # ==============================================================================
        return dT

#######################################################################################################################
# References
#######################################################################################################################
