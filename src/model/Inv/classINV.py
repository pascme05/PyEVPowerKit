#######################################################################################################################
#######################################################################################################################
# Title:        Python Electric Vehicle Power Toolkit (PyEVPowerKit)
# Topic:        EV Modeling
# File:         classINV
# Date:         18.03.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.1
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
A short description of the class goes here.
Inputs:     1)
            2)
            N)
Outputs:    1)
            2)
            M)
"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import numpy as np


#######################################################################################################################
# Class
#######################################################################################################################
class classB6:
    ###################################################################################################################
    # Constructor
    ###################################################################################################################
    def __init__(self, fs, Sw, nSw, V_0, I_0, T_0, V_ce0, r_T, V_d0, r_D, E_on, E_off, E_rec, R_esr, C_dc, R_ac, R_dc, C_th, R_th):
        self.fs = fs
        self.Sw = Sw
        self.nSw = nSw
        self.V_0 = V_0
        self.I_0 = I_0
        self.T_0 = T_0
        self.V_ce0 = V_ce0
        self.r_T = r_T
        self.V_d0 = V_d0
        self.r_D = r_D
        self.E_on = E_on
        self.E_off = E_off
        self.E_rec = E_rec
        self.R_esr = R_esr
        self.C_dc = C_dc
        self.R_ac = R_ac
        self.R_dc = R_dc
        self.C_th = C_th
        self.R_th = R_th

    ###################################################################################################################
    # Electrical
    ###################################################################################################################
    def calc_elec(self, n_EMA, cos_phi, Vs, Is, Vdc):
        # ==============================================================================
        # Pre-Processing
        # ==============================================================================
        v_six_step = 2 * Vdc / np.pi
        M_i = Vs / v_six_step
        w_m = 2 * np.pi * n_EMA

        # ==============================================================================
        # Calculation
        # ==============================================================================
        # ------------------------------------------
        # Currents
        # ------------------------------------------
        I_dc = 3 / np.pi * Is * M_i * cos_phi
        I_c = np.sqrt((2 * np.sqrt(3) / np.pi ** 2 * M_i + (
                    8 * np.sqrt(3) / np.pi ** 2 - 18 / np.pi ** 2 * M_i) * M_i * cos_phi ** 2) / 2) * Is

        # ==============================================================================
        # Return
        # ==============================================================================
        return [M_Gbx, n_Gbx, P_Gbx]

    ###################################################################################################################
    # Losses
    ###################################################################################################################
    def calc_loss(self, n_Gbx):
        # ==============================================================================
        # Calculation
        # ==============================================================================
        bear_loss = self.c_b * n_Gbx
        mesh_loss = self.c_m * n_Gbx
        wind_loss = self.c_w * n_Gbx**2

        # ==============================================================================
        # Post-Processing
        # ==============================================================================
        Pv = bear_loss + mesh_loss + wind_loss

        # ==============================================================================
        # Return
        # ==============================================================================
        return Pv

    ###################################################################################################################
    # Thermal
    ###################################################################################################################
    def calc_therm(self, dt, Tc, Pv1, Pv2):
        # ==============================================================================
        # Initialisation
        # ==============================================================================
        tau = self.R_th * self.C_th
        Rth = self.R_th

        # ==============================================================================
        # Calculation
        # ==============================================================================
        dT = (2 * tau - dt) / (2 * tau + dt) * Tc + (Rth * dt) / (2 * tau + dt) * (Pv1 + Pv2)

        # ==============================================================================
        # Return
        # ==============================================================================
        return dT

#######################################################################################################################
# References
#######################################################################################################################
