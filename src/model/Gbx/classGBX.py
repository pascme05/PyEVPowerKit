#######################################################################################################################
#######################################################################################################################
# Title:        Python Electric Vehicle Power Toolkit (PyEVPowerKit)
# Topic:        EV Modeling
# File:         classGBX
# Date:         18.03.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.1
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
A short description of the class goes here.
Inputs:     1)
            2)
            N)
Outputs:    1)
            2)
            M)
"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import numpy as np


#######################################################################################################################
# Class
#######################################################################################################################
class classGBX:
    ###################################################################################################################
    # Constructor
    ###################################################################################################################
    def __init__(self, i, J, T_max, n_max, P_max, c_m, c_b, c_w, C_th, R_th, h_th, A_th, Ea, k, n, L0, Nf0, F0, beta, CL, Bx):
        self.i = i
        self.J = J
        self.T_max = T_max
        self.n_max = n_max
        self.P_max = P_max
        self.c_m = c_m
        self.c_b = c_b
        self.c_w = c_w
        self.C_th = C_th
        self.R_th = R_th
        self.h_th = h_th
        self.A_th = A_th
        self.Ea = Ea
        self.k = k
        self.n = n
        self.L0 = L0
        self.Nf0 = Nf0
        self.F0 = F0
        self.beta = beta
        self.CL = CL
        self.Bx = Bx

    ###################################################################################################################
    # Mechanics
    ###################################################################################################################
    def calc_mech(self, M_Whe, n_Whe):
        # ==============================================================================
        # Pre-Processing
        # ==============================================================================
        n_Gbx = n_Whe * self.i
        w_m = 2 * np.pi * n_Whe
        Pout = M_Whe * w_m

        # ==============================================================================
        # Calculation
        # ==============================================================================
        # ------------------------------------------
        # Losses
        # ------------------------------------------
        [Pv, _, _, _] = self.calc_loss(n_Gbx)

        # ------------------------------------------
        # Power
        # ------------------------------------------
        # Driving
        if Pout >= 0:
            Pin = Pout + Pv

        # Recuperation
        else:
            if abs(Pv) < abs(Pout):
                Pin = Pout + Pv
            else:
                Pin = -1e-12

        # ------------------------------------------
        # Efficiency
        # ------------------------------------------
        eta = Pout / Pin
        eta = np.nan_to_num(eta, nan=1)

        # ------------------------------------------
        # Mechanical
        # ------------------------------------------
        M_Gbx = M_Whe / self.i / (eta + 1e-12)
        P_Gbx = 2 * np.pi * n_Gbx * M_Gbx

        # ==============================================================================
        # Post-processing
        # ==============================================================================
        if eta >= 1:
            eta = 1/eta

        # ==============================================================================
        # Return
        # ==============================================================================
        return [M_Gbx, n_Gbx, P_Gbx, Pout, Pv, eta]

    ###################################################################################################################
    # Losses
    ###################################################################################################################
    def calc_loss(self, n_Gbx):
        # ==============================================================================
        # Calculation
        # ==============================================================================
        bear_loss = self.c_b * np.abs(n_Gbx)
        mesh_loss = self.c_m * np.abs(n_Gbx)
        wind_loss = self.c_w * n_Gbx**2

        # ==============================================================================
        # Post-Processing
        # ==============================================================================
        Pv = bear_loss + mesh_loss + wind_loss

        # ==============================================================================
        # Return
        # ==============================================================================
        return [Pv, bear_loss, mesh_loss, wind_loss]

    ###################################################################################################################
    # Thermal
    ###################################################################################################################
    def calc_therm(self, dt, T, Pv1, Pv2):
        # ==============================================================================
        # Initialisation
        # ==============================================================================
        tau = self.R_th * self.C_th
        Rth = self.R_th

        # ==============================================================================
        # Calculation
        # ==============================================================================
        dT = (2 * tau - dt) / (2 * tau + dt) * T + (Rth * dt) / (2 * tau + dt) * (Pv1 + Pv2)

        # ==============================================================================
        # Return
        # ==============================================================================
        return dT

#######################################################################################################################
# References
#######################################################################################################################
