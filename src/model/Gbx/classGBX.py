#######################################################################################################################
#######################################################################################################################
# Title:        Python Electric Vehicle Power Toolkit (PyEVPowerKit)
# Topic:        EV Modeling
# File:         classGBX
# Date:         18.03.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.1
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
A short description of the class goes here.
Inputs:     1)
            2)
            N)
Outputs:    1)
            2)
            M)
"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================


#######################################################################################################################
# Class
#######################################################################################################################
class classGBX:
    ###################################################################################################################
    # Constructor
    ###################################################################################################################
    def __init__(self, i, J, c_m, c_b, c_w, C_th, R_th):
        self.i = i
        self.J = J
        self.c_m = c_m
        self.c_b = c_b
        self.c_w = c_w
        self.C_th = C_th
        self.R_th = R_th

    ###################################################################################################################
    # Mechanics
    ###################################################################################################################
    def calc_mech(self, M_Whe, n_Whe, P_Whe, eta):
        # ==============================================================================
        # Calculation
        # ==============================================================================
        M_Gbx = M_Whe / self.i / eta
        n_Gbx = n_Whe * self.i
        P_Gbx = P_Whe / eta

        # ==============================================================================
        # Return
        # ==============================================================================
        return [M_Gbx, n_Gbx, P_Gbx]

    ###################################################################################################################
    # Losses
    ###################################################################################################################
    def calc_loss(self, n_Gbx):
        # ==============================================================================
        # Calculation
        # ==============================================================================
        bear_loss = self.c_b * n_Gbx
        mesh_loss = self.c_m * n_Gbx
        wind_loss = self.c_w * n_Gbx**2

        # ==============================================================================
        # Post-Processing
        # ==============================================================================
        Pv = bear_loss + mesh_loss + wind_loss

        # ==============================================================================
        # Return
        # ==============================================================================
        return Pv

    ###################################################################################################################
    # Thermal
    ###################################################################################################################
    def calc_therm(self, dt, Tc, Pv1, Pv2):
        # ==============================================================================
        # Initialisation
        # ==============================================================================
        tau = self.R_th * self.C_th
        Rth = self.R_th

        # ==============================================================================
        # Calculation
        # ==============================================================================
        dT = (2 * tau - dt) / (2 * tau + dt) * Tc + (Rth * dt) / (2 * tau + dt) * (Pv1 + Pv2)

        # ==============================================================================
        # Return
        # ==============================================================================
        return dT

#######################################################################################################################
# References
#######################################################################################################################
