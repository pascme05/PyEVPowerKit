#######################################################################################################################
#######################################################################################################################
# Title:        EVOptiDrive (Optimal Drivetrain Design for Electrical Vehicles)
# Topic:        Electrical Vehicle (EV) Simulation
# File:         therSim
# Date:         19.08.2023
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.1
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================
from src.therm.simTempComp import simTempComp

# ==============================================================================
# External
# ==============================================================================
import numpy as np


#######################################################################################################################
# Function
#######################################################################################################################
def therSim(data, dataTime, iter, setupMdl, setupPar):
    ###################################################################################################################
    # Init
    ###################################################################################################################
    # ==============================================================================
    # Variables
    # ==============================================================================
    Tc = data['T_C']
    Vol = data['Vol']
    T_ref = setupMdl['Gen']['Sim']['T_ref']
    dt = data['t'][1] - data['t'][0]
    N = len(Tc)

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # HEAT
    # ==============================================================================
    for col1 in dataTime['Ther']['HEAT']:
        for col2 in dataTime['Ther']['HEAT'][col1]:
            for col3 in dataTime['Ther']['HEAT'][col1][col2]:
                try:
                    # ------------------------------------------
                    # Init
                    # ------------------------------------------
                    # Losses
                    Pv = dataTime['Loss']['HEAT'][col1][col2][col3]['Tot']

                    # Model
                    mdl = setupMdl['ther']['HEAT'][col1][col2]['mdl'][col3]

                    # Para
                    Off_c = setupPar['Therm']['dT']
                    method = setupMdl['HEAT'][col1]['t_Type']
                    alpha = setupMdl['ther']['HEAT'][col1][col2]['mdl'][col3]['alpha']

                    # ------------------------------------------
                    # Update Losses
                    # ------------------------------------------
                    if setupMdl['Gen']['Sim']['l_Theta'] == 1:
                        if iter == 0:
                            Pv[iter] = Pv[iter] * (1 + alpha * (Tc[iter] - T_ref))
                        else:
                            Pv[iter] = Pv[iter] * (1 + alpha * (dataTime['Ther']['HEAT'][col1][col2][col3][iter - 1] - T_ref))

                    # ------------------------------------------
                    # Solve
                    # ------------------------------------------
                    [T, T0] = simTempComp(mdl, Pv, Tc, Vol, Off_c, iter, dt, method)

                except:
                    T = setupPar['Therm']['dT']
                    T0 = 0
                    Pv = np.zeros(N)

                # ------------------------------------------
                # Update
                # ------------------------------------------
                dataTime['Loss']['HEAT'][col1][col2][col3]['Tot'][iter] = Pv[iter]
                dataTime['Ther']['HEAT'][col1][col2][col3][iter] = T + Tc[iter]
                setupMdl['ther']['HEAT'][col1][col2]['mdl'][col3]['T0'] = T0

    # ==============================================================================
    # CCU
    # ==============================================================================
    for col1 in dataTime['Ther']['CCU']:
        for col2 in dataTime['Ther']['CCU'][col1]:
            try:
                # ------------------------------------------
                # Init
                # ------------------------------------------
                # Losses
                Pv = dataTime['Loss']['CCU'][col1][col2]['Tot']

                # Model
                mdl = setupMdl['ther']['CCU'][col1]['mdl'][col2]

                # Para
                Off_c = setupPar['Therm']['dT']
                method = setupMdl['CCU'][col1]['t_Type']
                alpha = setupMdl['ther']['CCU'][col1]['mdl'][col2]['alpha']

                # ------------------------------------------
                # Update Losses
                # ------------------------------------------
                if setupMdl['Gen']['Sim']['l_Theta'] == 1:
                    if iter == 0:
                        Pv[iter] = Pv[iter] * (1 + alpha * (Tc[iter] - T_ref))
                    else:
                        Pv[iter] = Pv[iter] * (1 + alpha * (dataTime['Ther']['CCU'][col1][col2][iter - 1] - T_ref))

                # ------------------------------------------
                # Solve
                # ------------------------------------------
                [T, T0] = simTempComp(mdl, Pv, Tc, Vol, Off_c, iter, dt, method)

            except:
                T = setupPar['Therm']['dT']
                T0 = 0
                Pv = np.zeros(N)

            # ------------------------------------------
            # Update
            # ------------------------------------------
            dataTime['Loss']['CCU'][col1][col2]['Tot'][iter] = Pv[iter]
            dataTime['Ther']['CCU'][col1][col2][iter] = T + Tc[iter]
            setupMdl['ther']['CCU'][col1]['mdl'][col2]['T0'] = T0

    # ==============================================================================
    # HVS
    # ==============================================================================
    for col1 in dataTime['Ther']['HVS']:
        for col2 in dataTime['Ther']['HVS'][col1]:
            try:
                # ------------------------------------------
                # Init
                # ------------------------------------------
                # Losses
                Pv = dataTime['Loss']['HVS'][col1][col2]['Tot']

                # Model
                mdl = setupMdl['ther']['HVS'][col1]['mdl'][col2]

                # Para
                Off_c = setupPar['Therm']['dT']
                method = setupMdl['HVS'][col1]['t_Type']
                alpha = setupMdl['ther']['HVS'][col1]['mdl'][col2]['alpha']

                # ------------------------------------------
                # Update Losses
                # ------------------------------------------
                if setupMdl['Gen']['Sim']['l_Theta'] == 1:
                    if iter == 0:
                        Pv[iter] = Pv[iter] * (1 + alpha * (Tc[iter] - T_ref))
                    else:
                        Pv[iter] = Pv[iter] * (1 + alpha * (dataTime['Ther']['HVS'][col1][col2][iter - 1] - T_ref))

                # ------------------------------------------
                # Solve
                # ------------------------------------------
                [T, T0] = simTempComp(mdl, Pv, Tc, Vol, Off_c, iter, dt, method)

            except:
                T = setupPar['Therm']['dT']
                T0 = 0
                Pv = np.zeros(N)

            # ------------------------------------------
            # Update
            # ------------------------------------------
            dataTime['Loss']['HVS'][col1][col2]['Tot'][iter] = Pv[iter]
            dataTime['Ther']['HVS'][col1][col2][iter] = T + Tc[iter]
            setupMdl['ther']['HVS'][col1]['mdl'][col2]['T0'] = T0

    return dataTime

    ###################################################################################################################
    # References
    ###################################################################################################################

