#######################################################################################################################
#######################################################################################################################
# Title:        Python Electric Vehicle Power Toolkit (PyEVPowerKit)
# Topic:        EV Modeling
# File:         vehSim
# Date:         18.03.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.1
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
A short description of the function goes here.
Inputs:     1)
            2)
            N)
Outputs:    1)
            2)
            M)
"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
from scipy import integrate

#######################################################################################################################
# Additional Functions
#######################################################################################################################


#######################################################################################################################
# Main Function
#######################################################################################################################
def vehSim(iter, VEH, data, dataTime, setup):
    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # Parameters
    # ==============================================================================
    ang = data['ang'].values[iter]

    # ==============================================================================
    # Variables
    # ==============================================================================
    v = dataTime['VEH']['v'][iter]
    M_EMA = dataTime['EMA']['T']['Msh'][iter]

    ###################################################################################################################
    # Pre-Processing
    ###################################################################################################################
    # ==============================================================================
    # GBX
    # ==============================================================================
    if M_EMA > 0:
        eta = dataTime['GBX']['T']['eta'][iter]
    else:
        eta = 1 / dataTime['GBX']['T']['eta'][iter]

    # ==============================================================================
    # Variables
    # ==============================================================================
    if M_EMA > 0:
        M = M_EMA * setup['Par']['GBX']['i'] * eta
    else:
        if setup['Par']['xwd'] == 'FWD':
            M = M_EMA * setup['Par']['GBX']['i'] * eta / setup['Par']['VEH']['d_b']
        elif setup['Par']['xwd'] == 'RWD':
            M = M_EMA * setup['Par']['GBX']['i'] * eta / (1 - setup['Par']['VEH']['d_b'])
        else:
            M = M_EMA * setup['Par']['GBX']['i'] * eta

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    a = VEH.calc_acc(M, v, ang, setup)

    ###################################################################################################################
    # Post-Processing
    ###################################################################################################################
    dataTime['VEH']['a'][iter] = a
    dataTime['VEH']['v'] = integrate.cumtrapz(dataTime['VEH']['a'], data['t'].values, initial=0)
    dataTime['VEH']['s'] = integrate.cumtrapz(dataTime['VEH']['v'], data['t'].values, initial=0)

    ###################################################################################################################
    # Return
    ###################################################################################################################
    return dataTime

#######################################################################################################################
# References
#######################################################################################################################
