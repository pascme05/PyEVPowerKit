#######################################################################################################################
#######################################################################################################################
# Title:        Python Electric Vehicle Power Toolkit (PyEVPowerKit)
# Topic:        EV Modeling
# File:         mechSim
# Date:         18.03.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.1
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
A short description of the function goes here.
Inputs:     1)
            2)
            N)
Outputs:    1)
            2)
            M)
"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import numpy as np

#######################################################################################################################
# Additional Functions
#######################################################################################################################


#######################################################################################################################
# Main Function
#######################################################################################################################
def mechSim(iter, GBX, EMA, dataTime, setup):
    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # Parameters
    # ==============================================================================

    # ==============================================================================
    # Variables
    # ==============================================================================
    # ------------------------------------------
    # Front
    # ------------------------------------------
    M_Whe_F = dataTime['WHE']['F']['M'][iter]
    n_Whe_F = dataTime['WHE']['F']['n'][iter]

    # ------------------------------------------
    # Rear
    # ------------------------------------------
    M_Whe_R = dataTime['WHE']['R']['M'][iter]
    n_Whe_R = dataTime['WHE']['R']['n'][iter]

    ###################################################################################################################
    # Pre-Processing
    ###################################################################################################################
    # ==============================================================================
    # FWD
    # ==============================================================================
    if setup['Par']['xwd'] == 'FWD':
        M_Whe_R = 0
        n_Whe_R = 0

    # ==============================================================================
    # RWD
    # ==============================================================================
    if setup['Par']['xwd'] == 'RWD':
        M_Whe_F = 0
        n_Whe_F = 0

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # GBX
    # ==============================================================================
    # ------------------------------------------
    # Mechanical
    # ------------------------------------------
    [M_Gbx_F, n_Gbx_F, P_Gbx_F, P_Out_F, _, eta_Gbx_F] = GBX.calc_mech(M_Whe_F, n_Whe_F, setup)
    [M_Gbx_R, n_Gbx_R, P_Gbx_R, P_Out_R, _, eta_Gbx_R] = GBX.calc_mech(M_Whe_R, n_Whe_R, setup)

    # ------------------------------------------
    # Losses
    # ------------------------------------------
    [Pv_Gbx_F, Pv_Gbx_B_F, Pv_Gbx_M_F, Pv_Gbx_W_F] = GBX.calc_loss(n_Gbx_F)
    [Pv_Gbx_R, Pv_Gbx_B_R, Pv_Gbx_M_R, Pv_Gbx_W_R] = GBX.calc_loss(n_Gbx_R)

    # ==============================================================================
    # EMA
    # ==============================================================================
    [M_Ema_F, n_Ema_F, _, _, _] = EMA.calc_mech(M_Gbx_F, n_Gbx_F)
    [M_Ema_R, n_Ema_R, _, _, _] = EMA.calc_mech(M_Gbx_R, n_Gbx_R)

    ###################################################################################################################
    # Post-Processing
    ###################################################################################################################
    # ==============================================================================
    # GBX
    # ==============================================================================
    # ------------------------------------------
    # Front
    # ------------------------------------------
    # Mechanical
    dataTime['GBX']['F']['M'][iter] = M_Gbx_F
    dataTime['GBX']['F']['n'][iter] = n_Gbx_F
    dataTime['GBX']['F']['Pin'][iter] = P_Gbx_F
    dataTime['GBX']['F']['Pout'][iter] = P_Out_F
    dataTime['GBX']['F']['eta'][iter] = eta_Gbx_F

    # Losses
    dataTime['GBX']['F']['Pv'][iter] = Pv_Gbx_F
    dataTime['GBX']['F']['Pv_B'][iter] = Pv_Gbx_B_F
    dataTime['GBX']['F']['Pv_M'][iter] = Pv_Gbx_M_F
    dataTime['GBX']['F']['Pv_W'][iter] = Pv_Gbx_W_F

    # ------------------------------------------
    # Rear
    # ------------------------------------------
    # Mechanical
    dataTime['GBX']['R']['M'][iter] = M_Gbx_R
    dataTime['GBX']['R']['n'][iter] = n_Gbx_R
    dataTime['GBX']['R']['Pin'][iter] = P_Gbx_R
    dataTime['GBX']['R']['Pout'][iter] = P_Out_R
    dataTime['GBX']['R']['eta'][iter] = eta_Gbx_R

    # Losses
    dataTime['GBX']['R']['Pv'][iter] = Pv_Gbx_R
    dataTime['GBX']['R']['Pv_B'][iter] = Pv_Gbx_B_R
    dataTime['GBX']['R']['Pv_M'][iter] = Pv_Gbx_M_R
    dataTime['GBX']['R']['Pv_W'][iter] = Pv_Gbx_W_R

    # ------------------------------------------
    # Total
    # ------------------------------------------
    # Mechanical
    dataTime['GBX']['T']['M'][iter] = M_Gbx_F + M_Gbx_R
    dataTime['GBX']['T']['n'][iter] = (n_Gbx_F + n_Gbx_R) / 2
    dataTime['GBX']['T']['Pin'][iter] = P_Gbx_F + P_Gbx_R
    dataTime['GBX']['T']['Pout'][iter] = P_Out_F + P_Out_R
    dataTime['GBX']['T']['eta'][iter] = (eta_Gbx_F + eta_Gbx_R) / 2

    # Losses
    dataTime['GBX']['T']['Pv'][iter] = Pv_Gbx_F + Pv_Gbx_R
    dataTime['GBX']['T']['Pv_B'][iter] = Pv_Gbx_B_F + Pv_Gbx_B_R
    dataTime['GBX']['T']['Pv_M'][iter] = Pv_Gbx_M_F + Pv_Gbx_M_R
    dataTime['GBX']['T']['Pv_W'][iter] = Pv_Gbx_W_F + Pv_Gbx_W_R

    # ==============================================================================
    # EMA
    # ==============================================================================
    # ------------------------------------------
    # Front
    # ------------------------------------------
    dataTime['EMA']['F']['M'][iter] = M_Ema_F
    dataTime['EMA']['F']['n'][iter] = n_Ema_F
    dataTime['EMA']['F']['Pm'][iter] = 2 * np.pi * n_Ema_F * M_Ema_F

    # ------------------------------------------
    # Rear
    # ------------------------------------------
    dataTime['EMA']['R']['M'][iter] = M_Ema_R
    dataTime['EMA']['R']['n'][iter] = n_Ema_R
    dataTime['EMA']['R']['Pm'][iter] = 2 * np.pi * n_Ema_R * M_Ema_R

    # ------------------------------------------
    # Total
    # ------------------------------------------
    dataTime['EMA']['T']['M'][iter] = M_Ema_F + M_Ema_R
    dataTime['EMA']['T']['n'][iter] = (n_Ema_F + n_Ema_R) / 2
    dataTime['EMA']['T']['Pm'][iter] = 2 * np.pi * (n_Ema_R * M_Ema_R + n_Ema_F * M_Ema_F)

    ###################################################################################################################
    # Return
    ###################################################################################################################
    return dataTime

#######################################################################################################################
# References
#######################################################################################################################
