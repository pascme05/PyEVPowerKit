#######################################################################################################################
#######################################################################################################################
# Title:        Python Electric Vehicle Power Toolkit (PyEVPowerKit)
# Topic:        EV Modeling
# File:         therVeh
# Date:         18.03.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.1
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
This function sets the thermal properties of the coolant circuit and the initial coolant temperature.
Inputs:     1) data:        mission profile of the vehicle
            2) dataTime:    internal time dependent variables
            3) setup:       includes all simulation variables
Outputs:    1) dataTime:    updated state of charge of the battery
"""


#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import numpy as np


#######################################################################################################################
# Function
#######################################################################################################################
def therVeh(data, dataTime, setup):
    ###################################################################################################################
    # MSG IN
    ###################################################################################################################
    print("INFO: Parameter Thermal Vehicle")

    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # Parameters
    # ==============================================================================
    N = len(data['t'])                                                                                                   # number of samples

    # ==============================================================================
    # Variables
    # ==============================================================================
    Tc_con = setup['Exp']['Tc']                                                                                          # Constant coolant temperature (degC)
    Ta_con = setup['Exp']['Ta']                                                                                          # Constant ambient temperature (degC)

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # Measured T_C
    # ==============================================================================
    if setup['Exp']['Cool'] == 2:
        Tc = data['T_C'].to_numpy()
        Ta = data['T_A'].to_numpy()
        print("INFO: Using measured coolant temperature")

    # ==============================================================================
    # Model based
    # ==============================================================================
    elif setup['Exp']['Cool'] == 3:
        Tc = data['T_C'].to_numpy()
        Ta = data['T_A'].to_numpy()
        print("INFO: Using model based coolant temperature")

    # ==============================================================================
    # Constant
    # ==============================================================================
    else:
        Tc = Tc_con * np.ones(N)
        Ta = Ta_con * np.ones(N)
        print("INFO: Using constant coolant temperature")

    ###################################################################################################################
    # Post-Processing
    ###################################################################################################################
    dataTime['VEH']['Tc'] = Tc
    data['T_C'] = Tc
    data['T_A'] = Ta

    ###################################################################################################################
    # MSG Out
    ###################################################################################################################

    return [data, dataTime]

    ###################################################################################################################
    # References
    ###################################################################################################################
