#######################################################################################################################
#######################################################################################################################
# Title:        EVOptiDrive (Optimal Drivetrain Design for Electrical Vehicles)
# Topic:        Electrical Vehicle (EV) Simulation
# File:         mechWhe
# Date:         19.08.2023
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.1
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
This function calculates the forces on the wheels of the vehicle. It takes as input the physical forces acting on the
vehicle breaking them down onto the four wheels depending on the vehicle architecture.
Inputs:     1) data:        mission profile of the vehicle
            2) dataTime:    internal time dependent variables
            3) setup:       includes all simulation variables
Outputs:    1) dataTime:    updated time dependent variables including the wheels
"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import numpy as np
import copy


#######################################################################################################################
# Function
#######################################################################################################################
def mechWhe(data, dataTime, setup):
    ###################################################################################################################
    # MSG IN
    ###################################################################################################################
    print("INFO: Calculating Wheel Forces, Power, and Energy")

    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # Parameters
    # ==============================================================================
    r = setup['Par']['VEH']['r_dyn']                                                                                     # dynamic tire radius (m)
    N = len(dataTime['VEH']['F']['t'])                                                                                   # number of samples
    nWhe = 4                                                                                                             # number of wheels
    d_a = setup['Par']['VEH']['d_a']                                                                                     # ratio between front and rear acceleration forces for AWD operation
    d_b = setup['Par']['VEH']['d_b']                                                                                     # ratio between front and rear breaking forces for AWD operation

    # ==============================================================================
    # Variables
    # ==============================================================================
    v = data['v'].to_numpy()
    F_t_d = copy.deepcopy(dataTime['VEH']['F']['t'])
    F_t_d[F_t_d <= 0] = 0
    F_t_b = copy.deepcopy(dataTime['VEH']['F']['t'])
    F_t_b[F_t_b > 0] = 0

    ###################################################################################################################
    # Pre-Processing
    ###################################################################################################################
    # ==============================================================================
    # RWD
    # ==============================================================================
    if setup['Par']['xwd'] == 'RWD':
        # ------------------------------------------
        # Driving
        # ------------------------------------------
        # Msg
        print("INFO: RWD vehicle chosen")

        # Calc
        F_d_FL = np.zeros(N)
        F_d_FR = np.zeros(N)
        F_d_RL = F_t_d / nWhe * 2
        F_d_RR = F_t_d / nWhe * 2

        # ------------------------------------------
        # Breaking
        # ------------------------------------------
        # Msg
        print("INFO: RWD vehicle with constant force ration of ", d_b*100, "% during breaking chosen")

        # Calc
        F_b_FL = F_t_b * d_b / 2
        F_b_FR = F_t_b * d_b / 2
        F_b_RL = F_t_b * (1 - d_b) / 2
        F_b_RR = F_t_b * (1 - d_b) / 2

    # ==============================================================================
    # FWD
    # ==============================================================================
    elif setup['Par']['xwd'] == 'FWD':
        # ------------------------------------------
        # Driving
        # ------------------------------------------
        # Msg
        print("INFO: FWD vehicle chosen")

        # Calc
        F_d_FL = F_t_d / nWhe * 2
        F_d_FR = F_t_d / nWhe * 2
        F_d_RL = np.zeros(N)
        F_d_RR = np.zeros(N)

        # ------------------------------------------
        # Breaking
        # ------------------------------------------
        # Msg
        print("INFO: FWD vehicle with constant force ration of ", d_b*100, "% during breaking chosen")

        # Calc
        F_b_FL = F_t_b * d_b / 2
        F_b_FR = F_t_b * d_b / 2
        F_b_RL = F_t_b * (1 - d_b) / 2
        F_b_RR = F_t_b * (1 - d_b) / 2

    # ==============================================================================
    # AWD
    # ==============================================================================
    else:
        # ------------------------------------------
        # Driving
        # ------------------------------------------
        # Msg
        print("INFO: AWD vehicle with constant force ration of ", d_a*100, "% during driving chosen")

        # Calc
        F_d_FL = F_t_d * d_a / 2
        F_d_FR = F_t_d * d_a / 2
        F_d_RL = F_t_d * (1 - d_a) / 2
        F_d_RR = F_t_d * (1 - d_a) / 2

        # ------------------------------------------
        # Breaking
        # ------------------------------------------
        # Msg
        print("INFO: AWD vehicle with constant force ration of ", d_b*100, "% during breaking chosen")

        # Calc
        F_b_FL = F_t_b * d_b / 2
        F_b_FR = F_t_b * d_b / 2
        F_b_RL = F_t_b * (1 - d_b) / 2
        F_b_RR = F_t_b * (1 - d_b) / 2

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # Distributing Forces
    # ==============================================================================
    dataTime['WHE']['F']['F'] = F_d_FL + F_b_FL + F_d_FR + F_b_FR
    dataTime['WHE']['R']['F'] = F_d_RL + F_b_RL + F_d_RR + F_b_RR

    # ==============================================================================
    # Distributing Torques
    # ==============================================================================
    dataTime['WHE']['F']['M'] = dataTime['WHE']['F']['F'] * r
    dataTime['WHE']['R']['M'] = dataTime['WHE']['R']['F'] * r

    # ==============================================================================
    # Rotational Speed
    # ==============================================================================
    dataTime['WHE']['F']['n'] = v / (2 * np.pi * r)
    dataTime['WHE']['R']['n'] = v / (2 * np.pi * r)

    # ==============================================================================
    # Mechanical Power
    # ==============================================================================
    dataTime['WHE']['F']['P'] = dataTime['WHE']['F']['M'] * dataTime['WHE']['F']['n'] * 2 * np.pi
    dataTime['WHE']['R']['P'] = dataTime['WHE']['R']['M'] * dataTime['WHE']['R']['n'] * 2 * np.pi

    ###################################################################################################################
    # MSG Out
    ###################################################################################################################
    return dataTime

    ###################################################################################################################
    # References
    ###################################################################################################################
