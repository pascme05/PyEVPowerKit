#######################################################################################################################
#######################################################################################################################
# Title:        Python Electric Vehicle Power Toolkit (PyEVPowerKit)
# Topic:        EV Modeling
# File:         classVeh
# Date:         18.03.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.1
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
A short description of the class goes here.
Inputs:     1)
            2)
            N)
Outputs:    1)
            2)
            M)
"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import numpy as np


#######################################################################################################################
# Class
#######################################################################################################################
class classVEH:
    ###################################################################################################################
    # Constructor
    ###################################################################################################################
    def __init__(self, m, c_r, A, c_w, r_rim, m_rim, r_tire, m_tire, r_flat, d_b, d_a, eta, c_Vol, c_rho, c_Cp, c_vis, A_r, A_b):
        self.m = m
        self.c_r = c_r
        self.A = A
        self.c_w = c_w
        self.r_rim = r_rim
        self.m_rim = m_rim
        self.r_tire = r_tire
        self.m_tire = m_tire
        self.r_flat = r_flat
        self.d_b = d_b
        self.d_a = d_a
        self.eta = eta
        self.c_Vol = c_Vol
        self.c_rho = c_rho
        self.c_Cp = c_Cp
        self.c_vis = c_vis
        self.A_r = A_r
        self.A_b = A_b

    ###################################################################################################################
    # Mechanics
    ###################################################################################################################
    def calc_mech(self, M_Whe, n_Whe):
        # ==============================================================================
        # Pre-Processing
        # ==============================================================================
        n_Gbx = n_Whe * self.i
        w_m = 2 * np.pi * n_Whe
        Pout = M_Whe * w_m

        # ==============================================================================
        # Calculation
        # ==============================================================================
        # ------------------------------------------
        # Losses
        # ------------------------------------------
        [Pv, _, _, _] = self.calc_loss(n_Gbx)

        # ------------------------------------------
        # Power
        # ------------------------------------------
        # Driving
        if Pout >= 0:
            Pin = Pout + Pv

        # Recuperation
        else:
            if abs(Pv) < abs(Pout):
                Pin = Pout + Pv
            else:
                Pin = -1e-12

        # ------------------------------------------
        # Efficiency
        # ------------------------------------------
        eta = Pout / Pin
        eta = np.nan_to_num(eta, nan=1)

        # ------------------------------------------
        # Mechanical
        # ------------------------------------------
        M_Gbx = M_Whe / self.i / (eta + 1e-12)
        P_Gbx = 2 * np.pi * n_Gbx * M_Gbx

        # ==============================================================================
        # Post-processing
        # ==============================================================================
        if eta >= 1:
            eta = 1/eta

        # ==============================================================================
        # Return
        # ==============================================================================
        return [M_Gbx, n_Gbx, P_Gbx, Pout, Pv, eta]


#######################################################################################################################
# References
#######################################################################################################################
