#######################################################################################################################
#######################################################################################################################
# Title:        Python Electric Vehicle Power Toolkit (PyEVPowerKit)
# Topic:        EV Modeling
# File:         mechVeh
# Date:         18.03.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.1
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import numpy as np
from scipy import integrate


#######################################################################################################################
# Function
#######################################################################################################################
def mechVeh(data, setup):
    ###################################################################################################################
    # MSG IN
    ###################################################################################################################
    print("INFO: Calculating Vehicle Forces, Power, and Energy")

    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # Parameters
    # ==============================================================================
    # ------------------------------------------
    # General
    # ------------------------------------------
    N = len(data['t'])

    # ------------------------------------------
    # Physical
    # ------------------------------------------
    g = 9.81

    # ------------------------------------------
    # Vehicle
    # ------------------------------------------
    p_a = setup['Par']['p_a']
    v_w = setup['Par']['v_w']
    A = setup['Par']['VEH']['A']
    c_w = setup['Par']['VEH']['c_w']
    m = setup['Par']['VEH']['m']
    c_r = setup['Par']['VEH']['c_r']
    m_a = setup['Par']['VEH']['m_a']
    eta_sys = setup['Par']['VEH']['eta']

    # ==============================================================================
    # Variables
    # ==============================================================================
    t = data['t'].values
    v = data['v'].values
    a = data['a'].values
    s = data['s'].values
    ang = data['ang'].values

    # ==============================================================================
    # Init
    # ==============================================================================
    state = np.zeros(N)
    rec_on = np.zeros(N)
    rec_off = np.zeros(N)
    out = {'F': {}, 'P': {}, 'E': {}, 'eta': {}}

    ###################################################################################################################
    # Pre-Processing
    ###################################################################################################################
    state[v > 0] = 1

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # Forces
    # ==============================================================================
    out['F']['p'] = 0.5 * p_a * A * c_w * (v_w-v)**2
    out['F']['r'] = c_r * m * g * np.cos(ang) * state
    out['F']['c'] = m * g * np.sin(ang)
    out['F']['a'] = (m + m_a) * a
    out['F']['t'] = out['F']['p'] + out['F']['r'] + out['F']['c'] + out['F']['a']

    # ==============================================================================
    # Power
    # ==============================================================================
    # ------------------------------------------
    # Ideal
    # ------------------------------------------
    for name in out['F'].keys():
        out['P'][name] = out['F'][name] * v

    # ------------------------------------------
    # Efficiency
    # ------------------------------------------
    # Without Recu
    rec_off[out['P']['t'] < 0] = 0
    rec_off[out['P']['t'] >= 0] = 1 / eta_sys
    out['P']['rec_off'] = out['P']['t'] * rec_off

    # With Recu
    rec_on[out['P']['t'] < 0] = eta_sys
    rec_on[out['P']['t'] >= 0] = 1 / eta_sys
    out['P']['rec_on'] = out['P']['t'] * rec_on

    # ==============================================================================
    # Energy
    # ==============================================================================
    # ------------------------------------------
    # Ideal
    # ------------------------------------------
    for name in out['F'].keys():
        out['E'][name] = integrate.cumtrapz(out['P'][name], t, initial=0)

    # ------------------------------------------
    # Efficiency
    # ------------------------------------------
    # Without Recu
    out['E']['rec_off'] = integrate.cumtrapz(out['P']['rec_off'], t, initial=0)

    # With Recu
    out['E']['rec_on'] = integrate.cumtrapz(out['P']['rec_on'], t, initial=0)

    ###################################################################################################################
    # Post-Processing
    ###################################################################################################################
    out['eta']['t'] = out['E']['t'] / 3.6e6 / (s + 1e-12) * 1e5
    out['eta']['rec_on'] = out['E']['rec_on'] / 3.6e6 / (s + 1e-12) * 1e5
    out['eta']['rec_off'] = out['E']['rec_off'] / 3.6e6 / (s + 1e-12) * 1e5

    return out
