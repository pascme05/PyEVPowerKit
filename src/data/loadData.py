#######################################################################################################################
#######################################################################################################################
# Title:        Python Electric Vehicle Power Toolkit (PyEVPowerKit)
# Topic:        EV Modeling
# File:         loadData
# Date:         19.08.2023
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.1
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
This function loads the input data, i.e. the driving cycle of the vehicle. In this function the data is loaded, the
sampling frequency is detected and missing data is extended.
Inputs:     1) setup:   includes all simulation variables
            2) path:    includes all path variables
Outputs:    None
"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import pandas as pd
import numpy as np
from os.path import join as pjoin


#######################################################################################################################
# Function
#######################################################################################################################
def loadData(setup, path):
    ###################################################################################################################
    # MSG IN
    ###################################################################################################################
    print("------------------------------------------")
    print("Loading Data")
    print("------------------------------------------")
    print("START: Loading data")

    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # Parameters
    # ==============================================================================
    data = []

    # ==============================================================================
    # Variables
    # ==============================================================================
    names = ['t', 'v', 'ang', 'V_DC', 'T_A', 'T_C', 'T_O', 'Vol_C', 'Vol_O', 'RH']

    ###################################################################################################################
    # Loading
    ###################################################################################################################
    # ==============================================================================
    # Path
    # ==============================================================================
    name = setup['Dat']['name'] + '.xlsx'
    path = path['datPath']
    filename = pjoin(path, name)

    # ==============================================================================
    # Loading Data
    # ==============================================================================
    try:
        data = pd.read_excel(filename, sheet_name='data')
        print("INFO: Data file loaded")
    except:
        print("ERROR: Data file could not be loaded")

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # Check inputs
    # ==============================================================================
    for i in range(0, len(names)):
        try:
            data[names[i]]
        except:
            data[names[i]] = np.zeros((len(data['v']), 1))
            print("WARN: Data column %s does not exist using zeros", names[i])

    # ==============================================================================
    # Sampling time
    # ==============================================================================
    setup['Dat']['Ts_raw'] = data['t'][1] - data['t'][0]
    setup['Dat']['fs_raw'] = 1 / setup['Dat']['Ts_raw']

    ###################################################################################################################
    # Post-Processing
    ###################################################################################################################
    # ==============================================================================
    # Interpolating NaNs
    # ==============================================================================
    for i in range(0, len(names)):
        if pd.isna(data[names[i]]).any():
            data[names[i]] = data[names[i]].interpolate(limit_direction='both')
            print("WARN: NaN in data column %s detected using interpolation", names[i])

    # ==============================================================================
    # Removing NaNs and Inf
    # ==============================================================================
    for i in range(0, len(names)):
        # ------------------------------------------
        # NaN
        # ------------------------------------------
        data[names[i]] = data[names[i]].fillna(0)

        # ------------------------------------------
        # Inf
        # ------------------------------------------
        data[names[i]].replace([np.inf, -np.inf], 0, inplace=True)

    ###################################################################################################################
    # MSG Out
    ###################################################################################################################
    print("DONE: Loading data \n")

    return data
